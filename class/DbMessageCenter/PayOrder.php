<?php

/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/6/9
 * Time: 17:23
 */
class DbMessageCenter_PayOrder extends Model
{
    const DB_PREFIX = 'message_center.pay_order';
    const REDIS_KEY = 'mc:porder:';

    const STATUS_PAY_SUCCESS = 1;
    const STATUS_PAY_EXPIRE = 2;
    const STATUS_PAY_ING = 3;
    const STATUS_PAY_CLOSE = 4;

    public static $status = [
        self::STATUS_PAY_SUCCESS => '支付成功',
        self::STATUS_PAY_EXPIRE => '支付失败',
        self::STATUS_PAY_ING => '支付中',
        self::STATUS_PAY_CLOSE => '支付关闭'
    ];

    public function __construct()
    {
        $this->setTableName(self::DB_PREFIX);
        parent::__construct();
    }

    public static function getInfoBySnKey($sn)
    {
        return self::REDIS_KEY . 'snHash:' . substr(md5($sn), 0, 1);
    }

    public function update($data, $condition = null)
    {
        if (!$id = Model::getWhereConditionValue($condition, 'id')) {
            throw new Exception('更新必须指定id', 1);
        }
        $result = parent::update($data, $condition); // TODO: Change the autogenerated stub
        if ($result && $id) {
            $key = self::getInfoByIdKey($id);
            Cache_File::getInstance()->del($key);
        }
        return $result;
    }

    /**
     * @param $sn
     * @return mixed
     *  [
     *      id => sn
     *  ]
     */
    public function getInfoBySnOfCache($sn)
    {
        $key = self::getInfoBySnKey($sn);
        $result = $this->proModelSearchWithSortGather($key, $sn, [
            $this, 'getIdBySn'
        ], [
            [
                'sn' => $sn
            ]
        ], 600);
        return $result;
    }

    /**
     * @param $sn
     * @return array|unknown
     *  [
     *      sn => id
     *  ]
     */
    public function getIdBySn($sn)
    {
        $result = $this->find([
            'sn' => $sn
        ], 'id');
        if (empty($result)) {
            $result = [
                $sn => $result['id']
            ];
        }
        return $result;
    }

    public static function getInfoByIdKey($id)
    {
        return self::REDIS_KEY . 'id:' . $id;
    }

    public function getInfoByIdOfCache($id)
    {
        $key = self::getInfoByIdKey($id);
        $result = $this->proxyModelSearchWithFileCahe($key, [
            $this, 'find'
        ], [
            [
                'id' => $id
            ],
            'appId,otherListId,sn,aoumnt,productName,productSn,productDesc,num,status'
        ]);
        if (!empty($result)) {
            $result['id'] = $id;
        }
        return $result;
    }

    public function insert($data = array())
    {
        $r = parent::insert($data); // TODO: Change the autogenerated stub
        if ($r) {
            $key = self::getInfoByIdKey($data['id']);
            Cache_File::getInstance()->del($key);
        }
    }

    public function close($id)
    {
        $snInfo = $this->getInfoByIdOfCache($id);
        if ($snInfo['status'] == self::STATUS_PAY_SUCCESS) {
            throw new Exception('支付成功不能关闭订单', PayDrive_PayException::ERROR_APP);
        }
        return $this->update([
            'id' => $id
        ], [
            'status' => self::STATUS_PAY_CLOSE
        ]);
    }


}